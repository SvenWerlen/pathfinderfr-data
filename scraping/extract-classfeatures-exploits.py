#!/usr/bin/python3
# -*- coding: utf-8 -*-

import urllib.request
import yaml
import sys
import html
import re
from bs4 import BeautifulSoup
from lxml import html

from libhtml import jumpTo, html2text, extractLevel, cleanSectionName, cleanInlineDescription, mergeYAML

## Configurations pour le lancement
MOCK_EXPLOIT = None
#MOCK_EXPLOIT = "mocks/exploits.html"       # décommenter pour tester avec les exploits pré-téléchargées

URL = "http://www.pathfinder-fr.org/Wiki/Pathfinder-RPG.exploits.ashx"
FIELDS = ['Nom', 'Classe', 'Archétype', 'Prérequis', 'Source', 'Niveau', 'Auto', 'Description', 'DescriptionHTML', 'Référence' ]
MATCH = ['Nom', 'Classe', 'Archétype']

liste = []

print("Extraction des aptitude (exploits)...")


if MOCK_EXPLOIT:
    content = BeautifulSoup(open(MOCK_EXPLOIT),features="lxml").body
else:
    content = BeautifulSoup(urllib.request.urlopen(URL).read(),features="lxml").body

section = content.find_all("td")

exploit = {'Niveau':1, 'Auto': True}
newObj = False
descr = ""
descrHTML = ""
source = 'AG'
for s in section:
    for el in s.children:
        if el.name == "h3":
            nom = cleanSectionName(el.text)
            reference = URL + el.find_next("a")['href']

            if newObj:
                exploit['Classe'] = 'Pistolier'
                exploit['Description'] = descr.strip()
                exploit['DescriptionHTML'] = descrHTML
                exploit['Niveau'] = extractLevel(descr, 30)
                liste.append(exploit)
                exploit = {'Niveau':1, 'Auto': True}
                
            descr = ""
            descrHTML = ""
            exploit['Nom'] = "Exploit: " + nom
            exploit['Source'] = source
            exploit['Référence'] = reference
            source = "AG"
            newObj = True
        
        else:
            descr += html2text(el)
            descrHTML += html2text(el, True, 2)
    

# last element        
exploit['Classe'] = 'Pistolier'
exploit['Description'] = descr.strip()
exploit['DescriptionHTML'] = descrHTML
exploit['Niveau'] = extractLevel(descr, 30)
liste.append(exploit)


print("Fusion avec fichier YAML existant...")

HEADER = ""

mergeYAML("../data/classfeatures.yml", MATCH, FIELDS, HEADER, liste)

